{"version":3,"sources":["components/Search.jsx","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","state","setCityText","evt","setState","city","target","value","formSubmit","console","log","preventDefault","handleCityChange","Row","style","display","justifyContent","Form","inline","onSubmit","e","FormControl","color","backgroundColor","type","placeholder","onChange","this","Button","bsStyle","Component","Card","changeUnit","unit","tempInUnit","temp","Math","round","Jumbotron","ButtonGroup","padding","renderUnitButtonStyle","onClick","src","iconId","alt","description","textTransform","max","min","App","undefined","axios","get","then","response","data","name","floor","main","temp_max","temp_min","weather","icon","catch","error","finally","updateWeatherData","className","onCityChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f7e429c7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { FormControl, Button, Form, Row } from \"react-bootstrap\";\r\n\r\nclass Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      city: this.props.city,\r\n    };\r\n  }\r\n\r\n  state = {};\r\n\r\n  setCityText = (evt) => {\r\n    this.setState({ city: evt.target.value });\r\n  };\r\n\r\n  formSubmit=(evt)=>{\r\n      console.log(this.state.city)\r\n    evt.preventDefault();\r\n    this.props.handleCityChange(this.state.city);\r\n    this.setState({ city: \"\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Row style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <div>\r\n            <Form inline onSubmit={(e) => this.formSubmit(e)}>\r\n              <FormControl\r\n                style={{\r\n                  color: \"black\",\r\n                  backgroundColor: \"rgba(230,230,235,0.5)\",\r\n                }}\r\n                type=\"input\"\r\n                placeholder=\"Search for a city\"\r\n                onChange={this.setCityText}\r\n                value={this.state.city}\r\n              />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                bsStyle=\"default\"\r\n                style={{ backgroundColor: \"rgba(230,230,235,0.5)\" }}\r\n              >\r\n                Search\r\n              </Button>\r\n            </Form>\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Search;","import React, { Component } from 'react';\r\nimport {Jumbotron, Button , ButtonGroup} from 'react-bootstrap';\r\n\r\nimport Search from './Search';\r\n\r\nclass Card extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      city: \"\",\r\n      unit: \"C\",\r\n    };\r\n  }\r\n\r\n  renderUnitButtonStyle(unit) {\r\n    if (unit === this.state.unit) {\r\n      return { backgroundColor: \"rgba(230,230,235,0.7)\" };\r\n    } else return { backgroundColor: \"rgb(230,230,235)\" };\r\n  }\r\n\r\n  changeUnit=(unit)=>{\r\n      console.log(unit)\r\n    this.setState({unit:unit})\r\n  }\r\n\r\n  tempInUnit = (temp) => {\r\n    switch (this.state.unit) {\r\n      case \"C\":\r\n        return Math.round((temp - 273.15) * 100) / 100;\r\n      case \"F\":\r\n        return Math.round((temp - 273.15)*100)/100 * 9/5 + 32;\r\n      default:\r\n        return temp;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Jumbotron style={{ backgroundColor: \"#73d93d\" }}>\r\n        {/* Searchbar */}\r\n        <Search\r\n          handleCityChange={(city) => this.props.handleCityChange(city)}\r\n        ></Search>\r\n\r\n        <ButtonGroup style={{ padding: \"10px\" }}>\r\n          <Button\r\n            style={this.renderUnitButtonStyle(\"C\")}\r\n            onClick={() => this.changeUnit(\"C\")}\r\n          >\r\n            &deg;C\r\n          </Button>\r\n          <Button\r\n            style={this.renderUnitButtonStyle(\"F\")}\r\n            onClick={() => this.changeUnit(\"F\")}\r\n          >\r\n            &deg;F\r\n          </Button>\r\n          <Button\r\n            style={this.renderUnitButtonStyle(\"K\")}\r\n            onClick={() => this.changeUnit(\"K\")}\r\n          >\r\n            &deg;K\r\n          </Button>\r\n        </ButtonGroup>\r\n\r\n        {/* City Name  */}\r\n        <h2>{this.props.state.city}</h2>\r\n\r\n        {/* Weather condition icon */}\r\n        <img\r\n          src={`http://openweathermap.org/img/wn/${this.props.state.iconId}@2x.png`}\r\n          alt={this.state.description}\r\n        ></img>\r\n\r\n        {/* Weather Condition description */}\r\n        <h4 style={{ textTransform: \"capitalize\" }}>\r\n          {this.props.state.description}\r\n        </h4>\r\n        {/* Temperature */}\r\n        <h1>\r\n          {this.tempInUnit(this.props.state.temp)}&deg;{this.state.unit}{\" \"}\r\n        </h1>\r\n        {/* Maximum and Minimum Temperature  */}\r\n        <h4>\r\n          Max. {this.tempInUnit(this.props.state.max)}&deg;{this.state.unit} <b>|</b> Min{\" \"}\r\n          {this.tempInUnit(this.props.state.min)}\r\n          &deg;{this.state.unit}\r\n        </h4>\r\n      </Jumbotron>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport axios from 'axios';\n\nclass App extends Component {\n  state = { \n    \n   }\n  constructor(){\n    super();\n    this.state = {\n      city:\"Pune\",\n      temp: undefined,\n      max: undefined,\n      min: undefined,\n      description:\"\"\n    };\n  }\n\n  updateWeatherData(city){\n    axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=67cc74cb53c23e2a0ffbdb4a3a82d610`\n      )\n      .then((response) => {\n        let data = response.data;\n        this.setState({\n          city: data.name,\n          temp: Math.floor(data.main.temp ),\n          max: Math.floor(data.main.temp_max ),\n          min: Math.floor(data.main.temp_min ),\n          description: data.weather[0].description,\n          iconId: data.weather[0].icon,\n        });\n        console.log(this.state);\n      })\n      .catch((error) => console.log(error))\n      .finally();\n\n  }\n\n  componentDidMount(){\n    this.updateWeatherData(\"Pune\");\n      \n  }\n\n\n  onCityChange(city){\n    this.setState({city:city});\n    this.updateWeatherData(city);\n  }\n\n  render() { \n    return (\n      <div className=\"App\">\n        \n        <Card\n          state={this.state}\n          handleCityChange={(city) => {\n            this.onCityChange(city);\n            console.log(city);\n          }}\n        ></Card>\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}