{"version":3,"sources":["components/Search.jsx","components/Unit.jsx","components/Card.js","App.js","actions.js","serviceWorker.js","index.js","reducer.js"],"names":["Search","props","state","setCityText","evt","setState","city","target","value","formSubmit","console","log","preventDefault","handleCityChange","Row","style","display","justifyContent","Form","inline","onSubmit","e","FormControl","color","backgroundColor","type","placeholder","onChange","this","Button","bsStyle","Component","Unit","changeUnit","unit","handleChangeUnit","ButtonGroup","padding","renderUnitButtonStyle","onClick","Card","tempInUnit","temp","Math","round","onChangeUnit","Jumbotron","src","iconId","alt","description","max","min","textTransform","App","undefined","axios","get","then","response","data","name","floor","main","temp_max","temp_min","weather","icon","catch","error","finally","updateWeatherData","mapStateToProps","className","onCityChange","connect","dispatch","payload","actions","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","action","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wWAwDeA,E,kDApDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,MAAQ,GAPW,EASnBC,YAAc,SAACC,GACb,EAAKC,SAAS,CAAEC,KAAMF,EAAIG,OAAOC,SAVhB,EAanBC,WAAa,SAACL,GACZM,QAAQC,IAAI,EAAKT,MAAMI,MACvBF,EAAIQ,iBACJ,EAAKX,MAAMY,iBAAiB,EAAKX,MAAMI,MACvC,EAAKD,SAAS,CAAEC,KAAM,MAftB,EAAKJ,MAAQ,CACXI,KAAM,EAAKL,MAAMK,MAHF,E,qDAoBT,IAAD,OACP,OACE,6BACE,kBAACQ,EAAA,EAAD,CAAKC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WAC7C,6BACE,kBAACC,EAAA,EAAD,CAAMC,QAAM,EAACC,SAAU,SAACC,GAAD,OAAO,EAAKZ,WAAWY,KAC5C,kBAACC,EAAA,EAAD,CACEP,MAAO,CACLQ,MAAO,QACPC,gBAAiB,oBAEnBC,KAAK,QACLC,YAAY,oBACZC,SAAUC,KAAKzB,YACfK,MAAOoB,KAAK1B,MAAMI,OAGpB,kBAACuB,EAAA,EAAD,CACEJ,KAAK,SACLK,QAAQ,UACRf,MAAO,CAAES,gBAAiB,qBAH5B,kB,GAtCOO,a,SCiDNC,E,kDAhDX,WAAY/B,GAAO,IAAD,8BACd,cAAMA,IAYVgC,WAAa,SAACC,GAEV,EAAKjC,MAAMkC,iBAAiBD,IAb5B,EAAKhC,MAAQ,CAAEgC,KAAKjC,EAAMiC,MAFZ,E,kEAIQA,GAGlB,OAAIA,IAASN,KAAK3B,MAAMiC,KAEjB,CAAEV,gBAAiB,yBAChB,CAAEA,gBAAiB,sB,+BAU3B,IAAD,OACL,OAEI,kBAACY,EAAA,EAAD,CAAarB,MAAO,CAAEsB,QAAS,SAC3B,kBAACR,EAAA,EAAD,CACId,MAAOa,KAAKU,sBAAsB,KAClCC,QAAS,kBAAM,EAAKN,WAAW,OAFnC,SAMJ,kBAACJ,EAAA,EAAD,CACId,MAAOa,KAAKU,sBAAsB,KAClCC,QAAS,kBAAM,EAAKN,WAAW,OAFnC,SAMA,kBAACJ,EAAA,EAAD,CACId,MAAOa,KAAKU,sBAAsB,KAClCC,QAAS,kBAAM,EAAKN,WAAW,OAFnC,c,GArCOF,aCiEJS,E,kDA5DX,WAAYvC,GAAO,IAAD,8BACd,cAAMA,IAOZwC,WAAa,SAACC,GACZ,OAAQ,EAAKxC,MAAMgC,MACjB,IAAK,IACH,OAAOS,KAAKC,MAAwB,KAAjBF,EAAO,SAAiB,IAC7C,IAAK,IACH,OAAOC,KAAKC,MAAwB,KAAjBF,EAAO,SAAiB,IAAM,EAAI,EAAI,GAC3D,QACE,OAAOA,IAfO,EAmBpBG,aAAe,SAACX,GACb,EAAK7B,SAAS,CAAC6B,KAAKA,KAlBjB,EAAKhC,MAAQ,CACbI,KAAKL,EAAMK,KACX4B,KAAK,KAJS,E,qDAuBR,IAAD,OACL,OACE,kBAACY,EAAA,EAAD,CAAW/B,MAAO,CAAES,gBAAiB,YACnC,kBAAC,EAAD,CACEX,iBAAkB,SAACP,GAAD,OAAU,EAAKL,MAAMY,iBAAiBP,MAK1D,kBAACQ,EAAA,EAAD,CAAKC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WAC7C,6BACE,kBAAC,EAAD,CACEkB,iBAAkB,SAACD,GAAU,EAAKW,aAAaX,IAC/CA,KAAMN,KAAK1B,MAAMgC,SAKvB,4BAAKN,KAAK3B,MAAMK,MAEhB,yBACEyC,IAAG,4CAAuCnB,KAAK3B,MAAM+C,OAAlD,WACHC,IAAKrB,KAAK1B,MAAMgD,cAElB,4BAAKtB,KAAKa,WAAWb,KAAK3B,MAAMyC,MAAhC,OAA4Cd,KAAK1B,MAAMgC,KAAvD,KACA,oCACQN,KAAKa,WAAWb,KAAK3B,MAAMkD,KADnC,OAC8CvB,KAAK1B,MAAMgC,KADzD,IAC+D,gCAD/D,OAC4E,IACzEN,KAAKa,WAAWb,KAAK3B,MAAMmD,KAF9B,OAEyCxB,KAAK1B,MAAMgC,MAEpD,wBAAInB,MAAO,CAAEsC,cAAe,eACzBzB,KAAK3B,MAAMiD,kB,GAvDPnB,a,sCCCbuB,E,kDAEJ,aAAc,IAAD,8BACX,gBACKpD,MAAQ,CACXI,KAAK,OACLoC,UAAMa,EACNJ,SAAKI,EACLH,SAAKG,EACLL,YAAY,GACZhB,KAAK,KARI,E,8DAYK5B,GAAM,IAAD,OACrBkD,IACGC,IADH,4DAEyDnD,EAFzD,4CAIGoD,MAAK,SAACC,GACL,IAAIC,EAAOD,EAASC,KACpB,EAAKvD,SAAS,CACZC,KAAMsD,EAAKC,KACXnB,KAAMC,KAAKmB,MAAMF,EAAKG,KAAKrB,MAC3BS,IAAKR,KAAKmB,MAAMF,EAAKG,KAAKC,UAC1BZ,IAAKT,KAAKmB,MAAMF,EAAKG,KAAKE,UAC1Bf,YAAaU,EAAKM,QAAQ,GAAGhB,YAC7BF,OAAQY,EAAKM,QAAQ,GAAGC,OAE1BzD,QAAQC,IAAI,EAAKT,OACjB,EAAKD,MAAMY,iBAAiB,EAAKX,UAElCkE,OAAM,SAACC,GAAD,OAAW3D,QAAQC,IAAI0D,MAC7BC,Y,0CAKH1C,KAAK2C,kBAAkB,U,mCAIZrC,GACXN,KAAKvB,SAAS,CAAC6B,W,mCAGJ5B,GACXsB,KAAK2C,kBAAkBjE,GACvBsB,KAAK3B,MAAMY,iBAAiBe,KAAK1B,OACjCsE,EAAgB5C,KAAK1B,S,+BAGb,IAAD,OACP,OACE,yBAAKuE,UAAU,OACb,kBAAC,EAAD,CACEnE,KAAMsB,KAAK3B,MAAMK,KACjBoC,KAAMd,KAAK3B,MAAMyC,KACjBS,IAAKvB,KAAK3B,MAAMkD,IAChBC,IAAKxB,KAAK3B,MAAMmD,IAChBF,YAAatB,KAAK3B,MAAMiD,YACxBF,OAAQpB,KAAK3B,MAAM+C,OACnBnC,iBAAkB,SAACP,GACjB,EAAKoE,aAAapE,IAEpB6B,iBAAkB,SAACD,GACjB,EAAKW,aAAaX,W,GAlEZH,aAyEXyC,EAAkB,SAAAtE,GACtB,MAAO,CAELI,KAAMJ,EAAMI,KACZoC,KAAMxC,EAAMwC,KACZS,IAAKjD,EAAMiD,IACXjB,KAAMhC,EAAMgC,KACZkB,IAAKlD,EAAMkD,IACXF,YAAahD,EAAMgD,YACnBF,OAAQ9C,EAAM8C,SAWH2B,oBAAQH,GAPI,SAACI,GAC1B,MAAO,CACLzC,iBAAkB,SAACD,GAAD,OAAU0C,EChF1B,SAAqB1C,GACxB,MAAM,CACFT,KAAK,eACLoD,QAAQ,CACJ3C,SD4E8B4C,CAAoB5C,KACzDrB,iBAAkB,SAACX,GChGjB,IAAqB0D,EDgGOgB,GChGPhB,EDgGoC1D,EC/FrD,CACLuB,KAAM,eACNoD,QAAQ,2BACHjB,GADE,IAELtD,KAAMsD,EAAKtD,KACXoC,KAAMkB,EAAKlB,KACXS,IAAKS,EAAKT,IACVC,IAAKQ,EAAKR,IACVF,YAAaU,EAAKV,YAClBF,OAAQY,EAAKZ,gBD0FL2B,CAA6CrB,GExFzCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTC,IAAMC,EAAQC,cACrBC,IAASC,OACP,kBAAC,WAAD,CAAUH,MAAOC,uBCXJ,WAA6C,IAA5BnF,EAA2B,uDAArB,CAACI,KAAK,QAAQkF,EAAO,uCAC3D,OAAOA,EAAO/D,MACV,IAAK,eAED,OADAf,QAAQC,IAAI,gBACL6E,EAAOX,QAElB,IAAK,eACD,kCACO3E,GADP,IAEIgC,KAAKsD,EAAOtD,OAEpB,QACI,OAAOhC,ODAb,kBAAC,EAAD,OAGAuF,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAACoC,GACLA,EAAaC,gBAEd3B,OAAM,SAACC,GACN3D,QAAQ2D,MAAMA,EAAM2B,c","file":"static/js/main.6ebc8182.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FormControl, Button, Form, Row } from \"react-bootstrap\";\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: this.props.city,\n    };\n  }\n\n  state = {};\n\n  setCityText = (evt) => {\n    this.setState({ city: evt.target.value });\n  };\n\n  formSubmit = (evt) => {\n    console.log(this.state.city)\n    evt.preventDefault();\n    this.props.handleCityChange(this.state.city);\n    this.setState({ city: \"\" });\n  }\n\n  render() {\n    return (\n      <div>\n        <Row style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <div>\n            <Form inline onSubmit={(e) => this.formSubmit(e)}>\n              <FormControl\n                style={{\n                  color: \"black\",\n                  backgroundColor: \"rgb(230,230,235)\",\n                }}\n                type=\"input\"\n                placeholder=\"Search for a city\"\n                onChange={this.setCityText}\n                value={this.state.city}\n              />\n\n              <Button\n                type=\"submit\"\n                bsStyle=\"default\"\n                style={{ backgroundColor: \"rgb(230,230,235)\" }}\n              >\n                Search\n              </Button>\n            </Form>\n          </div>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Search;","import React, { Component } from 'react';\r\nimport {Button , ButtonGroup} from 'react-bootstrap'\r\n\r\nclass Unit extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = { unit:props.unit }}\r\n\r\n        renderUnitButtonStyle(unit) {\r\n        \r\n            \r\n            if (unit === this.props.unit) {\r\n                \r\n            return { backgroundColor: \"rgba(230,230,235,0.7)\" }\r\n        } else return { backgroundColor: \"rgb(230,230,235)\" };\r\n    }\r\n\r\n    changeUnit = (unit) => {\r\n        // console.log(unit)\r\n        this.props.handleChangeUnit(unit);\r\n    }\r\n\r\n    \r\n\r\n    render() { \r\n        return ( \r\n\r\n            <ButtonGroup style={{ padding: \"10px\" }}>\r\n                <Button\r\n                    style={this.renderUnitButtonStyle(\"C\")}\r\n                    onClick={() => this.changeUnit(\"C\")}\r\n                >\r\n                    &deg;C\r\n            </Button >\r\n            <Button\r\n                style={this.renderUnitButtonStyle(\"F\")}\r\n                onClick={() => this.changeUnit(\"F\")}\r\n            >\r\n                &deg;F\r\n          </Button>\r\n            <Button\r\n                style={this.renderUnitButtonStyle(\"K\")}\r\n                onClick={() => this.changeUnit(\"K\")}\r\n            >\r\n                &deg;K\r\n          </Button>\r\n            </ButtonGroup >\r\n\r\n         );\r\n    }\r\n}\r\n \r\nexport default Unit;","import React, { Component } from 'react';\nimport {Jumbotron, Row} from 'react-bootstrap';\nimport Search from './Search';\nimport Unit from './Unit';\n\n\nclass Card extends Component {\n    \n    constructor(props){\n        super(props);\n        this.state = { \n        city:props.city,\n        unit:\"C\"\n     }\n    }\n    \n  tempInUnit = (temp) => {\n    switch (this.state.unit) {\n      case \"C\":\n        return Math.round((temp - 273.15) * 100) / 100;\n      case \"F\":\n        return Math.round((temp - 273.15) * 100) / 100 * 9 / 5 + 32;\n      default:\n        return temp;\n    }\n  };\n\n  onChangeUnit = (unit) => { \n     this.setState({unit:unit})\n    }\n\n    render() { \n        return (\n          <Jumbotron style={{ backgroundColor: \"#73d93d\" }}>\n            <Search\n              handleCityChange={(city) => this.props.handleCityChange(city)}\n              \n              ></Search>\n\n          \n            <Row style={{ display: \"flex\", justifyContent: \"center\" }}>\n              <div>\n                <Unit\n                  handleChangeUnit={(unit) => {this.onChangeUnit(unit);}}\n                  unit={this.state.unit}>\n                </Unit>\n              </div>\n            </Row>\n\n            <h2>{this.props.city}</h2>\n\n            <img\n              src={`https://openweathermap.org/img/wn/${this.props.iconId}@2x.png`}\n              alt={this.state.description}\n            ></img>\n            <h1>{this.tempInUnit(this.props.temp)}&deg;{this.state.unit} </h1>\n            <h4>\n              Max. {this.tempInUnit(this.props.max)}&deg;{this.state.unit} <b>|</b> Min{\" \"}\n              {this.tempInUnit(this.props.min)}&deg;{this.state.unit}\n            </h4>\n            <h4 style={{ textTransform: \"capitalize\" }}>\n              {this.props.description}\n            </h4>\n          </Jumbotron>\n        );\n    }\n}\n \nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport axios from 'axios';\nimport {connect} from 'react-redux'; \nimport * as actions from './actions';\n\nclass App extends Component {\n  \n  constructor(){\n    super();\n    this.state = {\n      city:\"Pune\",\n      temp: undefined,\n      max: undefined,\n      min: undefined,\n      description:\"\",\n      unit:\"C\"\n    };\n  }\n\n  updateWeatherData(city){\n    axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=67cc74cb53c23e2a0ffbdb4a3a82d610`\n      )\n      .then((response) => {\n        let data = response.data;\n        this.setState({\n          city: data.name,\n          temp: Math.floor(data.main.temp),\n          max: Math.floor(data.main.temp_max),\n          min: Math.floor(data.main.temp_min),\n          description: data.weather[0].description,\n          iconId: data.weather[0].icon,\n        });\n        console.log(this.state);\n        this.props.handleCityChange(this.state)\n      })\n      .catch((error) => console.log(error))\n      .finally();\n\n  }\n\n  componentDidMount(){\n    this.updateWeatherData(\"Pune\")\n          \n  }\n\n  onChangeUnit(unit){\n    this.setState({unit})\n  }\n\n  onCityChange(city){\n    this.updateWeatherData(city);\n    this.props.handleCityChange(this.state);\n    mapStateToProps(this.state)\n  }\n\n  render() { \n    return (\n      <div className=\"App\">\n        <Card\n          city={this.props.city}\n          temp={this.props.temp}\n          max={this.props.max}\n          min={this.props.min}\n          description={this.props.description}\n          iconId={this.props.iconId}\n          handleCityChange={(city) => {\n            this.onCityChange(city);\n          }}\n          handleChangeUnit={(unit) => {\n            this.onChangeUnit(unit);\n          }}\n        ></Card>\n      </div>\n    );\n  }\n}\n const mapStateToProps = state => {\n   return {\n     // state:state,\n     city: state.city,\n     temp: state.temp,\n     max: state.max,\n     unit: state.unit,\n     min: state.min,\n     description: state.description,\n     iconId: state.iconId,\n   };\n };\n\n const mapDispatchToProps = (dispatch) => {\n   return {\n     handleChangeUnit: (unit) => dispatch(actions.unitChanged(unit)),\n     handleCityChange: (state) => {dispatch(actions.cityChanged(state))}\n   };\n };\n\n export default connect(mapStateToProps, mapDispatchToProps)(App);","export function cityChanged(data){\r\n    return {\r\n      type: \"CITY_CHANGED\",\r\n      payload: {\r\n        ...data,\r\n        city: data.city,\r\n        temp: data.temp,\r\n        max: data.max,\r\n        min: data.min,\r\n        description: data.description,\r\n        iconId: data.iconId\r\n      },\r\n    };\r\n}\r\n\r\nexport function unitChanged(unit){\r\n    return{\r\n        type:\"CITY_CHANGED\",\r\n        payload:{\r\n            unit\r\n        }\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport reducer from './reducer';\n\nexport const store = createStore;\nReactDOM.render(\n  <Provider store={createStore(reducer)}>\n  <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default function reducer(state={city:'Pune'},action){\r\nswitch(action.type){\r\n    case \"CITY_CHANGED\":\r\n        console.log(\"CITY CHANGED\")\r\n        return action.payload\r\n    \r\n    case \"UNIT_CHANGED\":\r\n        return{\r\n            ...state,\r\n            unit:action.unit\r\n        }\r\n    default:\r\n        return state;\r\n}\r\n}"],"sourceRoot":""}