{"version":3,"sources":["components/Card.js","components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","setCityText","evt","setState","city","target","value","console","log","state","Jumbotron","Row","style","display","justifyContent","Form","inline","onSubmit","props","handleCityChange","FormControl","type","placeholder","onChange","this","Button","bsStyle","onClick","src","iconId","temp","max","min","textTransform","description","Component","Search","App","undefined","axios","get","then","response","data","name","Math","floor","main","temp_max","temp_min","weather","icon","catch","error","finally","updateWeatherData","className","onCityChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kUA6DeA,E,kDAvDX,aAAc,IAAD,8BACT,gBAMJC,YAAY,SAACC,GACT,EAAKC,SAAS,CAACC,KAAKF,EAAIG,OAAOC,QAC/BC,QAAQC,IAAI,EAAKC,MAAML,OAPvB,EAAKK,MAAQ,CACbL,KAAK,IAHI,E,qDAYH,IAAD,OACL,OACE,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WAC7C,6BACE,kBAACC,EAAA,EAAD,CACEC,QAAM,EACNC,SAAU,kBAAM,EAAKC,MAAMC,iBAAiB,EAAKV,MAAML,QAEvD,kBAACgB,EAAA,EAAD,CACEC,KAAK,QACLC,YAAY,oBACZC,SAAUC,KAAKvB,cAGjB,kBAACwB,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,kBAAM,EAAKT,MAAMC,iBAAiB,EAAKV,MAAML,QAFxD,aAUN,4BAAKoB,KAAKN,MAAMT,MAAML,MAEtB,yBACEwB,IAAG,2CAAsCJ,KAAKN,MAAMT,MAAMoB,OAAvD,aAEL,4BAAKL,KAAKN,MAAMT,MAAMqB,KAAtB,UACA,oCACQN,KAAKN,MAAMT,MAAMsB,IADzB,SACoC,gCADpC,OACiD,IAC9CP,KAAKN,MAAMT,MAAMuB,IAFpB,SAIA,wBAAIpB,MAAO,CAAEqB,cAAe,eACzBT,KAAKN,MAAMT,MAAMyB,kB,GAlDbC,aCUJC,E,4MAVX3B,MAAQ,G,uDAEJ,OACE,kC,GAJW0B,a,kBCqENE,E,kDA9Db,aAAc,IAAD,8BACX,gBAJF5B,MAAQ,GAKN,EAAKA,MAAQ,CACXL,KAAK,GACL0B,UAAMQ,EACNP,SAAKO,EACLN,SAAKM,EACLJ,YAAY,IAPH,E,8DAWK9B,GAAM,IAAD,OACrBmC,IACGC,IADH,2DAEwDpC,EAFxD,4CAIGqC,MAAK,SAACC,GACL,IAAIC,EAAOD,EAASC,KACpBpC,QAAQC,IAAI,EAAKC,OACjB,EAAKN,SAAS,CACZC,KAAMuC,EAAKC,KACXd,KAAMe,KAAKC,MAAMH,EAAKI,KAAKjB,KAAO,QAClCC,IAAKc,KAAKC,MAAMH,EAAKI,KAAKC,SAAW,QACrChB,IAAKa,KAAKC,MAAMH,EAAKI,KAAKE,SAAW,QACrCf,YAAaS,EAAKO,QAAQ,GAAGhB,YAC7BL,OAAQc,EAAKO,QAAQ,GAAGC,OAE1B5C,QAAQC,IAAI,EAAKC,UAElB2C,OAAM,SAACC,GAAD,OAAW9C,QAAQC,IAAI6C,MAC7BC,Y,0CAKH9B,KAAK+B,kBAAkB,U,mCAKZnD,GACXoB,KAAKrB,SAAS,CAACC,KAAKA,IACpBG,QAAQC,IAAIgB,KAAKf,MAAML,MACvBoB,KAAK+B,kBAAkBnD,K,+BAGf,IAAD,OACP,OACE,yBAAKoD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE/C,MAAOe,KAAKf,MACZU,iBAAkB,SAACf,GACjBG,QAAQC,IAAIJ,GACZ,EAAKqD,aAAarD,W,GA1DZ+B,aCMEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMmB,c","file":"static/js/main.1d00c788.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Jumbotron} from 'react-bootstrap';\r\nimport { FormGroup, FormControl, Button, Form, Row } from \"react-bootstrap\";\r\n\r\nclass Card extends Component {\r\n    \r\n    constructor(){\r\n        super();\r\n        this.state = { \r\n        city:\"\",\r\n     }\r\n    }\r\n    \r\n    setCityText=(evt)=>{\r\n        this.setState({city:evt.target.value})\r\n        console.log(this.state.city)\r\n    }\r\n\r\n    render() { \r\n        return (\r\n          <Jumbotron>\r\n            <Row style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n              <div>\r\n                <Form\r\n                  inline\r\n                  onSubmit={() => this.props.handleCityChange(this.state.city)}\r\n                >\r\n                  <FormControl\r\n                    type=\"input\"\r\n                    placeholder=\"Search for a city\"\r\n                    onChange={this.setCityText}\r\n                  />\r\n\r\n                  <Button\r\n                    bsStyle=\"primary\"\r\n                    onClick={() => this.props.handleCityChange(this.state.city)}\r\n                  >\r\n                    Search\r\n                  </Button>\r\n                </Form>\r\n              </div>\r\n            </Row>\r\n\r\n            <h2>{this.props.state.city}</h2>\r\n\r\n            <img\r\n              src={`http://openweathermap.org/img/wn/${this.props.state.iconId}@2x.png`}\r\n            ></img>\r\n            <h1>{this.props.state.temp}&deg;C </h1>\r\n            <h4>\r\n              Max. {this.props.state.max}&deg;C <b>|</b> Min{\" \"}\r\n              {this.props.state.min}&deg;C\r\n            </h4>\r\n            <h4 style={{ textTransform: \"capitalize\" }}>\r\n              {this.props.state.description}\r\n            </h4>\r\n          </Jumbotron>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Card;","import React, { Component } from 'react';\r\n\r\n\r\nclass Search extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (\r\n          <div>\r\n              \r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Search;","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport Search from './components/Search';\nimport axios from 'axios';\n\nclass App extends Component {\n  state = { \n    \n   }\n  constructor(){\n    super();\n    this.state = {\n      city:\"\",\n      temp: undefined,\n      max: undefined,\n      min: undefined,\n      description:\"\"\n    };\n  }\n\n  updateWeatherData(city){\n    axios\n      .get(\n        `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=67cc74cb53c23e2a0ffbdb4a3a82d610`\n      )\n      .then((response) => {\n        let data = response.data;\n        console.log(this.state);\n        this.setState({\n          city: data.name,\n          temp: Math.floor(data.main.temp - 273.15),\n          max: Math.floor(data.main.temp_max - 273.15),\n          min: Math.floor(data.main.temp_min - 273.15),\n          description: data.weather[0].description,\n          iconId: data.weather[0].icon,\n        });\n        console.log(this.state);\n      })\n      .catch((error) => console.log(error))\n      .finally();\n\n  }\n\n  componentDidMount(){\n    this.updateWeatherData(\"Pune\");\n      \n  }\n\n\n  onCityChange(city){\n    this.setState({city:city});\n    console.log(this.state.city);\n    this.updateWeatherData(city);\n  }\n\n  render() { \n    return (\n      <div className=\"App\">\n        <Search></Search>\n        <Card\n          state={this.state}\n          handleCityChange={(city) => {\n            console.log(city)\n            this.onCityChange(city);\n          }}\n        ></Card>\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}